{"version":3,"sources":["fragment.glsl","scripts/back.js"],"names":["module","exports","$","document","ready","app","PIXI","Application","window","innerWidth","innerHeight","autoResize","getElementById","appendChild","view","getJSON","data","loader","forEach","element","i","add","img","on","resources","console","log","Filter","fragment","background","Sprite","image2","texture","x","renderer","width","y","height","anchor","filters","stage","addChild","load"],"mappings":";AAAAA,OAAOC,QAAQ;;AC+Gf,aA/GA,IAAA,EAAA,EAAA,QAAA,qBA+GA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA7GAC,EAAEC,UAAUC,MAAM,WACRC,IAAAA,EAAM,IAAIC,KAAKC,YAAYC,OAAOC,WAAYD,OAAOE,YAAa,CACpEC,YAAW,IAGfR,SAASS,eAAe,aAAaC,YAAYR,EAAIS,MAErDZ,EAAEa,QAAQ,YAAa,SAASC,GAExBC,IAAAA,EAAUX,KAAKW,OAEnBD,EAAKE,QAAQ,SAACC,EAAQC,GAClBH,EAAOI,IAAYD,QAAAA,OAAAA,EAAE,GAAeD,UAAAA,OAAAA,EAAQG,QAGhDL,EAAOM,GAAG,WAAY,SAASN,EAAQO,GAEnCC,QAAQC,IAAIF,GACPG,IAAAA,EAAS,IAAIrB,KAAKqB,OAAO,KAAMC,EAAtB,SAERC,EAAc,IAAIvB,KAAKwB,OAAON,EAAUO,OAAOC,SACrDH,EAAWI,EAAI5B,EAAI6B,SAASC,MAAQ,EACpCN,EAAWO,EAAI/B,EAAI6B,SAASG,OAAS,EAErCR,EAAWS,OAAOL,EAAI,GACtBJ,EAAWS,OAAOF,EAAI,GAEtBP,EAAWM,MAAQ3B,OAAOC,WAE1BoB,EAAWU,QAAU,CAACZ,GAEtBtB,EAAImC,MAAMC,SAASZ,KAGvBZ,EAAOyB","file":"back.fd203492.js","sourceRoot":"..","sourcesContent":["module.exports=\"#define GLSLIFY 1\\nuniform sampler2D uSampler;\\nuniform sampler2D uTextureOne;\\nuniform sampler2D uTextureTwo;\\nvarying vec2 vTextureCoord;\\nuniform mat3 mappedMatrix;\\nuniform vec2 uvAspect;\\nuniform float uProgress;\\n\\nmat2 rotate(float a) {\\n    float s = sin(a);\\n    float c = cos(a);\\n    return mat2(c, -s, s, c);\\n}\\n\\nvoid main() {\\n\\n    vec3 map = vec3(vTextureCoord.xy,1.)*mappedMatrix;\\n    vec2 uv = (map.xy - .5)*.5*vec2(2.,2.) + 0.5 ;\\n\\n    vec2 uvDivided = fract(uv*vec2(150.,1.));\\n    float progress = fract(uProgress);\\n\\n    vec2 uvDisplaced1 = uv + rotate(3.1415926/4.)*uvDivided*progress*0.1*2.;\\n    vec2 uvDisplaced2 = uv + rotate(3.1415926/4.)*uvDivided*(1. - progress)*0.1;\\n    //gl_FragColor = vec4(1.,1.,0.,1.);\\n\\n    //vec2 uv = vec2(vTextureCoord.x + sin(vTextureCoord.y*10.)/10., vTextureCoord.y);\\n    vec4 im1 = texture2D(uTextureOne, uvDisplaced1);\\n    vec4 im2 = texture2D(uTextureTwo, uvDisplaced2);\\n\\n    gl_FragColor = mix(im1, im2, progress);\\n    //gl_FragColor =vec4(uvDivided,0.,1.);\\n}\";","import fragment from '../fragment.glsl'\r\n\r\n$(document).ready(function() {\r\n    const app = new PIXI.Application(window.innerWidth, window.innerHeight, {\r\n        autoResize:true\r\n    });\r\n\r\n    document.getElementById(\"bgspecial\").appendChild(app.view);\r\n    \r\n    $.getJSON(\"data.json\", function(data){\r\n        //\r\n        let loader  = PIXI.loader;\r\n\r\n        data.forEach((element,i) => {\r\n            loader.add(`image${i+1}`, `./imgs/${element.img}`)\r\n        });\r\n\r\n        loader.on('complete', function(loader, resources){\r\n\r\n            console.log(resources);\r\n            let  Filter = new PIXI.Filter(null, fragment);\r\n\r\n            const background =  new PIXI.Sprite(resources.image2.texture);\r\n            background.x = app.renderer.width / 2;\r\n            background.y = app.renderer.height / 2;\r\n\r\n            background.anchor.x = 0.5;\r\n            background.anchor.y = 0.5;\r\n\r\n            background.width = window.innerWidth;\r\n\r\n            background.filters = [Filter]; \r\n\r\n            app.stage.addChild(background);\r\n        });\r\n\r\n        loader.load();\r\n    });\r\n\r\n    // let loader = PIXI.loader;\r\n    // loader.add('img1', img1);\r\n    // loader.add('img2', img2);\r\n    // loader.add('img3', img3);\r\n    // loader.add('img4', img4);\r\n    \r\n    // loader.load((loader, resources) => {\r\n    //     //let Filter = new PIXI.Filter(null, fragment);\r\n    //     const background = new PIXI.Filter(null, fragment);\r\n\r\n    //     background.x = app.renderer.width / 2;\r\n    //     background.y = app.renderer.height / 2;\r\n\r\n\r\n    //     let Filter = new PIXI.Filter(null, fragment);\r\n\r\n    //     background.filters = [Filter];\r\n    // });\r\n});\r\n\r\n// $(document).ready(function(){\r\n//     // The application will create a renderer using WebGL, if possible,\r\n//     // with a fallback to a canvas render. It will also setup the ticker\r\n//     // and the root stage PIXI.Container.\r\n//     const app = new PIXI.Application();\r\n    \r\n//     // The application will create a canvas element for you that you\r\n//     // can then insert into the DOM.\r\n//     document.body.appendChild(app.view);\r\n    \r\n//     // load the texture we need\r\n//     PIXI.loader.add('bunny', 'bunny.png').load((loader, resources) => {\r\n//         // This creates a texture from a 'bunny.png' image.\r\n//         const bunny = new PIXI.Sprite(resources.bunny.texture);\r\n    \r\n//         // Setup the position of the bunny\r\n//         bunny.x = app.renderer.width / 2;\r\n//         bunny.y = app.renderer.height / 2;\r\n    \r\n//         // Rotate around the center\r\n//         bunny.anchor.x = 0.5;\r\n//         bunny.anchor.y = 0.5;\r\n    \r\n//         // Add the bunny to the scene we are building.\r\n//         app.stage.addChild(bunny);\r\n    \r\n//         // Listen for frame updates\r\n//         app.ticker.add(() => {\r\n//             // each frame we spin the bunny around a bit\r\n//             bunny.rotation += 0.01;\r\n//         });\r\n//     });\r\n\r\n//     /*FUNCION PARA CAMBIAR EL FONDO*/ \r\n//     //Poner todas las imagenes en el require\r\n//     // let reqImgs = (x) => {\r\n//     //     return new Promise((resolve, reject) => {\r\n//     //         let imgs = {};\r\n//     //         let rootFolder = __dirname+'\\\\imgs\\\\';\r\n//     //         data.map((x, index)=>{\r\n//     //             console.log(rootFolder+x.img);\r\n//     //             imgs[`img${x.Id}`] = require(rootFolder+x.img);\r\n//     //         });\r\n\r\n//     //         resolve(imgs);\r\n//     //     });\r\n//     // }\r\n\r\n//     // reqImgs().then((data, err)=>{\r\n//     //     console.log(data);\r\n//     // });\r\n\r\n// });"]}